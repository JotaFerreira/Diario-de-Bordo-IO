package br.com.rmdiariodebordo.view;

import br.com.rmdiariodebordo.model.dao.ControladorDAO;
import br.com.rmdiariodebordo.model.dao.OcorrenciaDAO;
import br.com.rmdiariodebordo.model.dao.SupervisorDAO;
import br.com.rmdiariodebordo.model.dao.UsuarioDAO;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import br.com.rmdiariodebordo.model.vo.Controlador;
import br.com.rmdiariodebordo.model.vo.OcorrenciaCoordenador;
import br.com.rmdiariodebordo.model.vo.OcorrenciaSupervisor;
import br.com.rmdiariodebordo.model.vo.Supervisor;
import br.com.rmdiariodebordo.model.bo.ExcelExporter;

/**
 *
 * @author joao.oliveira
 */
public class FormMinhasOcorrencias extends javax.swing.JFrame {

    /**
     * Creates new form FormMinhasOcorrencias
     */
    public FormMinhasOcorrencias() {
        initComponents();
    }

    public FormMinhasOcorrencias(String usuario) {
        this.usuario = usuario;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        funcionarioLabel = new javax.swing.JLabel();
        funcionarioCmb = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        diaInicialCmb = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        mesInicialCmb = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        anoInicialCmb = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        diarioTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Minhas Ocorrencias");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        funcionarioLabel.setText("Funcionário:");

        jLabel9.setText("Data Inicial:");

        jLabel18.setText("/");

        mesInicialCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mesInicialCmbItemStateChanged(evt);
            }
        });

        jLabel19.setText("/");

        diarioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(diarioTable);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(funcionarioLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcionarioCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diaInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mesInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anoInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcionarioLabel)
                    .addComponent(funcionarioCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anoInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(mesInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(diaInicialCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );

        jMenu1.setText("Sistema");

        jMenuItem1.setText("Fechar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opções");

        jMenuItem2.setText("Exportar para Excel");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String usuario;
    private String cargo;

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public String getCargo() {
        return cargo;
    }

    public void setCargo(String cargo) {
        this.cargo = cargo;
    }

    public static boolean iniciado;
    

    private void mesInicialCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mesInicialCmbItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED & FormMinhasOcorrencias.iniciado) {
            preencheDias();
        }
    }//GEN-LAST:event_mesInicialCmbItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        UsuarioDAO UsuarioDAO = new UsuarioDAO();

        try {
            String cargo = UsuarioDAO.getCargo(this.getUsuario());
            this.setCargo(cargo);

            switch (cargo) {
                case "SUPERVISOR":
                    this.funcionarioLabel.setText("Controlador:");
                    atualizaControladores();
                    break;
                case "COORDENADOR":
                    this.funcionarioLabel.setText("Supervisor:");
                    atualizaSupervisores();
                    break;
            }

            preencheDias();
            preencheMeses();
            preencheAnos();
            FormMinhasOcorrencias.iniciado = true;

        } catch (SQLException | ClassNotFoundException ex) {

            JOptionPane.showMessageDialog(null, "Erro:" + ex, "Erro", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Object objFuncionario = this.funcionarioCmb.getSelectedItem();
        String funcionario = objFuncionario != null ? objFuncionario.toString() : "";

        Object objDiaInicio = this.diaInicialCmb.getSelectedItem();
        Object objMesInicio = this.mesInicialCmb.getSelectedItem();
        Object objAnoInicio = this.anoInicialCmb.getSelectedItem();

        String diaInicio = objDiaInicio != null ? new DecimalFormat("00").format(Integer.parseInt(objDiaInicio.toString())) : "";
        String mesInicio = objMesInicio != null ? new DecimalFormat("00").format(Integer.parseInt(objMesInicio.toString())) : "";
        String anoInicio = objAnoInicio != null ? objAnoInicio.toString() : "";

        String dataInicio = anoInicio + "-" + mesInicio + "-" + diaInicio;

        String cargo = this.getCargo();

        if (cargo.equals("SUPERVISOR")) {

            try {
                Object[] colunasSupervisor = {"DATA", "UF", "SEGMENTO", "CONTROLADOR", "OCORRENCIA", "PERIODO", "OBSERVAÇÃO"};
                OcorrenciaDAO OcorrenciaDAO = new OcorrenciaDAO();
                DefaultTableModel model = new DefaultTableModel(new Object[0][0], colunasSupervisor) {

                    @Override
                    public boolean isCellEditable(int row, int col) {

                        return false;

                    }

                };

                ArrayList<OcorrenciaSupervisor> ocorrencias = OcorrenciaDAO.getOcorrenciaPorSupervisorFiltro(this.getUsuario(),
                        funcionario, dataInicio);

                for (OcorrenciaSupervisor ocorrencia : ocorrencias) {

                    String[] valores = {ocorrencia.getData_att(), ocorrencia.getUf(), ocorrencia.getSegmento(), ocorrencia.getControlador(),
                        ocorrencia.getOcorrencia(), ocorrencia.getPeriodo(), ocorrencia.getObservacao()};
                    model.addRow(valores);

                }

                this.diarioTable.setModel(model);

            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Erro:" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } else if (cargo.equals("COORDENADOR")) {

            try {
                Object[] colunasCoordenador = {"DATA", "UF", "SEGMENTO", "SUPERVISOR", "OCORRENCIA", "PERIODO", "OBSERVAÇÃO"};
                OcorrenciaDAO OcorrenciaDAO = new OcorrenciaDAO();
                DefaultTableModel model = new DefaultTableModel(new Object[0][0], colunasCoordenador) {

                    @Override
                    public boolean isCellEditable(int row, int col) {

                        return false;

                    }

                };

                ArrayList<OcorrenciaCoordenador> ocorrencias = OcorrenciaDAO.getOcorrenciaPorCoordenadorFiltro(this.getUsuario(),
                        funcionario, dataInicio);

                for (OcorrenciaCoordenador ocorrencia : ocorrencias) {

                    String[] valores = {ocorrencia.getData_att(), ocorrencia.getUf(), ocorrencia.getSegmento(), ocorrencia.getSupervisor(),
                        ocorrencia.getOcorrencia(), ocorrencia.getPeriodo(), ocorrencia.getObservacao()};
                    model.addRow(valores);

                }

                this.diarioTable.setModel(model);

            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Erro:" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        this.dispose();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        ExcelExporter ExExcel = new ExcelExporter();
        ExExcel.saveFile(this, this.diarioTable);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void preencheDias() {

        Object objMes = this.mesInicialCmb.getSelectedItem();
        Object objAno = this.anoInicialCmb.getSelectedItem();

        Calendar cal = Calendar.getInstance();
        cal.setTime(Calendar.getInstance().getTime());
        int mes = objMes != null ? Integer.parseInt(objMes.toString()) : cal.get(Calendar.MONTH) + 1;
        int ano = objAno != null ? Integer.parseInt(objAno.toString()) : cal.get(Calendar.YEAR);

        Calendar mycal = new GregorianCalendar(ano, mes, 0);
        int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);

        this.diaInicialCmb.removeAllItems();
        this.diaInicialCmb.addItem(null);

        for (int i = 1; i <= daysInMonth; i++) {

            this.diaInicialCmb.addItem(i);

        }

        this.diaInicialCmb.setSelectedIndex(-1);

    }

    private void preencheMeses() throws SQLException, ClassNotFoundException {

        this.mesInicialCmb.removeAllItems();
        this.mesInicialCmb.addItem(null);

        for (int i = 1; i <= 12; i++) {

            this.mesInicialCmb.addItem(i);
        }

        this.mesInicialCmb.setSelectedIndex(-1);

    }

    private void preencheAnos() {

        this.anoInicialCmb.removeAllItems();
        this.anoInicialCmb.addItem(null);
        this.anoInicialCmb.addItem(2015);
        this.anoInicialCmb.setSelectedIndex(-1);

    }

    private void atualizaControladores() throws SQLException, ClassNotFoundException {

        ControladorDAO ControladorDAO = new ControladorDAO();
        ArrayList<Controlador> controladores = ControladorDAO.getListaControladores();
        this.funcionarioCmb.removeAllItems();
        this.funcionarioCmb.addItem("");

        for (Controlador controlador : controladores) {

            this.funcionarioCmb.addItem(controlador.getNome());

        }

        this.funcionarioCmb.setSelectedIndex(-1);

    }

    private void atualizaSupervisores() throws SQLException, ClassNotFoundException {

        SupervisorDAO SupervisorDAO = new SupervisorDAO();
        ArrayList<Supervisor> supervisores = SupervisorDAO.getListaSupervisores();
        this.funcionarioCmb.removeAllItems();
        this.funcionarioCmb.addItem("");

        for (Supervisor supervisor : supervisores) {

            this.funcionarioCmb.addItem(supervisor.getNome());

        }

        this.funcionarioCmb.setSelectedIndex(-1);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMinhasOcorrencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMinhasOcorrencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMinhasOcorrencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMinhasOcorrencias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMinhasOcorrencias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anoInicialCmb;
    private javax.swing.JComboBox diaInicialCmb;
    private javax.swing.JTable diarioTable;
    private javax.swing.JComboBox funcionarioCmb;
    private javax.swing.JLabel funcionarioLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox mesInicialCmb;
    // End of variables declaration//GEN-END:variables
}
