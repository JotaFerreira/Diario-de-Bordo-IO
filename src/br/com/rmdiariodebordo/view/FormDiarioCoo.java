package br.com.rmdiariodebordo.view;

import br.com.rmdiariodebordo.model.dao.CoordenadorDAO;
import br.com.rmdiariodebordo.model.dao.OcorrenciaDAO;
import br.com.rmdiariodebordo.model.dao.SegmentoDAO;
import br.com.rmdiariodebordo.model.dao.SupervisorDAO;
import br.com.rmdiariodebordo.model.vo.Ocorrencia;
import diario.de.bordo.Versao;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import br.com.rmdiariodebordo.model.vo.OcorrenciaCoordenador;
import br.com.rmdiariodebordo.model.vo.Segmento;
import br.com.rmdiariodebordo.model.vo.Supervisor;

/**
 *
 * @author joao.oliveira
 */
public class FormDiarioCoo extends javax.swing.JFrame {

    /**
     * Creates new form FormDiarioCon
     */
    private String usuario;

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public FormDiarioCoo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ufCmb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        segmentoCmb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ocorrenciaCmb = new javax.swing.JComboBox();
        supervisorLabel = new javax.swing.JLabel();
        supervisorCmb = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        obsTxt = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        diarioTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        horaCmb = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        minutoCmb = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("UF:");

        ufCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CE", "MA", "PI" }));
        ufCmb.setSelectedIndex(-1);

        jLabel2.setText("Segmento:");

        segmentoCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                segmentoCmbItemStateChanged(evt);
            }
        });

        jLabel3.setText("Ocorrência:");

        ocorrenciaCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ocorrenciaCmbItemStateChanged(evt);
            }
        });

        supervisorLabel.setText("Supervisor:");

        supervisorCmb.setEnabled(false);

        jLabel7.setText("Observações:");

        obsTxt.setColumns(20);
        obsTxt.setRows(5);
        jScrollPane1.setViewportView(obsTxt);

        jButton1.setBackground(new java.awt.Color(51, 102, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setLabel("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        diarioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(diarioTable);

        jLabel9.setText("Periodo:");

        jLabel10.setText(":");

        jMenu1.setText("Sistema");

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opções");

        jMenuItem3.setText("Atualizar Supervisores");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Atualizar Ocorrencias");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Minhas Ocorrencias");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ufCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(segmentoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ocorrenciaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(supervisorLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(supervisorCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(14, 14, 14)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(horaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minutoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(349, 349, 349)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ufCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(segmentoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ocorrenciaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(horaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(minutoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supervisorCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supervisorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static boolean iniciado;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Object uf = this.ufCmb.getSelectedItem();
        Object segmento = this.segmentoCmb.getSelectedItem();
        Object ocorrencia = this.ocorrenciaCmb.getSelectedItem();
        Object periodoHora = this.horaCmb.getSelectedItem();
        Object periodoMinuto = this.minutoCmb.getSelectedItem();
        Object objSupervisor = this.supervisorCmb.getSelectedItem();
        String obs = this.obsTxt.getText().replace("'", "");
        

        if (uf == null) {

            JOptionPane.showMessageDialog(null, "A UF é obrigatória!");
            return;

        }

        if (segmento == null) {

            JOptionPane.showMessageDialog(null, "O SEGMENTO é obrigatório!");
            return;

        }

        if (ocorrencia == null) {

            JOptionPane.showMessageDialog(null, "A OCORRENCIA é obrigatória!");
            return;

        }

        if (objSupervisor == null & this.supervisorCmb.isEnabled()) {

            JOptionPane.showMessageDialog(null, "O CONTROLADOR é obrigatório!");
            return;

        }
        
        String supervisor = objSupervisor != null ? objSupervisor.toString() : "";
        CoordenadorDAO CoordenadorDAO = new CoordenadorDAO();
        OcorrenciaCoordenador Ocorrencia = new OcorrenciaCoordenador();

        String d = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());

        try {

            String pHora = periodoHora != null ? periodoHora.toString() : "";
            String pMinuto = periodoMinuto != null ? periodoMinuto.toString() : "";

            Ocorrencia.setData_att(d);
            Ocorrencia.setCoordenador(CoordenadorDAO.getNome(this.usuario));
            Ocorrencia.setUf(uf.toString());
            Ocorrencia.setSegmento(segmento.toString());
            Ocorrencia.setSupervisor(supervisor);
            Ocorrencia.setOcorrencia(ocorrencia.toString());
            Ocorrencia.setPeriodo(pHora + ":" + pMinuto);
            Ocorrencia.setObservacao(obs);
            Ocorrencia.setUsername(this.usuario);

            CoordenadorDAO.registrarOcorrencia(Ocorrencia);
            atualizaDiario();
            limpar();

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        Versao vInfo = new Versao();
        this.setTitle("Diário de Bordo - Usuário: " + this.getUsuario() + " - Build: " + vInfo.getVersion());

        atualizaOcorrencias();

        for (int i = 1; i <= 24; i++) {

            this.horaCmb.addItem(String.format("%02d", i));

        }

        for (int x = 0; x <= 59; x++) {

            this.minutoCmb.addItem(String.format("%02d", x));

        }

        this.horaCmb.setSelectedIndex(-1);
        this.minutoCmb.setSelectedIndex(-1);

        try {

            atualizaSegmentos();
            atualizaSupervisores();
            atualizaDiario();
            FormDiarioCoo.iniciado = true;

        } catch (SQLException | ClassNotFoundException ex) {

            JOptionPane.showMessageDialog(null, "Erro:" + ex, "Erro", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_formWindowOpened

    private void segmentoCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_segmentoCmbItemStateChanged


    }//GEN-LAST:event_segmentoCmbItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        FormLogin frm = new FormLogin();
        frm.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        atualizaOcorrencias();

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void ocorrenciaCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ocorrenciaCmbItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED & FormDiarioCoo.iniciado) {

            Object objOcorrencia = evt.getItem();
            String ocorrencia = objOcorrencia != null ? objOcorrencia.toString() : "";

            if (ocorrencia.equals("ATESTADO MÉDICO") | ocorrencia.equals("AUSENTE PERÍODO")
                    | ocorrencia.equals("FALTA") | ocorrencia.equals("FÉRIAS")
                    | ocorrencia.equals("FOLGA") | ocorrencia.equals("ATRASO")) {

                this.supervisorCmb.setEnabled(true);

            } else {

                this.supervisorCmb.setEnabled(false);

            }

        }

    }//GEN-LAST:event_ocorrenciaCmbItemStateChanged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        try {
            atualizaSupervisores();
        } catch (SQLException | ClassNotFoundException ex) {
             JOptionPane.showMessageDialog(null, "Erro:" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
      
        FormMinhasOcorrencias frm = new FormMinhasOcorrencias(this.getUsuario());
        frm.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void atualizaSupervisores() throws SQLException, ClassNotFoundException {

        SupervisorDAO SupervisorDAO = new SupervisorDAO();
        ArrayList<Supervisor> supervisores = SupervisorDAO.getListaSupervisores();

        for (Supervisor supervisor : supervisores) {

            this.supervisorCmb.addItem(supervisor.getNome());

        }

        this.supervisorCmb.setSelectedIndex(-1);

    }
    
    private void atualizaSegmentos() throws SQLException, ClassNotFoundException{
        
        SegmentoDAO SegmentoDAO = new SegmentoDAO();
        ArrayList<Segmento> segmentos = SegmentoDAO.getListaSegmentos();

        for (Segmento segmento : segmentos) {

            this.segmentoCmb.addItem(segmento.getNomeSegmento());

        }

        this.segmentoCmb.setSelectedIndex(-1);
        
    }
    
    private void atualizaOcorrencias() {

        this.ocorrenciaCmb.removeAllItems();
        OcorrenciaDAO DAOOcorrencia = new OcorrenciaDAO();

        try {

            ArrayList<Ocorrencia> ocorrencias = DAOOcorrencia.getOcorrenciasGestao();
            for(Ocorrencia o : ocorrencias){
                
                this.ocorrenciaCmb.addItem(o.getNome());
                
            }

            this.ocorrenciaCmb.setSelectedIndex(-1);

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }

    private void atualizaDiario() throws SQLException, ClassNotFoundException {

        OcorrenciaDAO DAOOcorrencia = new OcorrenciaDAO();
        ArrayList<OcorrenciaCoordenador> ocorrencias = DAOOcorrencia.getOcorrenciaPorCoordenador(this.getUsuario());
        Object[] colunaNomes = {"UF", "SEGMENTO", "SUPERVISOR", "OCORRENCIA", "PERIODO","OBSERVAÇÃO"};
        DefaultTableModel dados = new DefaultTableModel(new Object[0][0], colunaNomes) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for (OcorrenciaCoordenador ocorrencia : ocorrencias) {


            Object[] valores = {ocorrencia.getUf(),ocorrencia.getSegmento(), ocorrencia.getSupervisor(), ocorrencia.getOcorrencia(),
                ocorrencia.getPeriodo(), ocorrencia.getObservacao()};
            
            dados.addRow(valores);

        }

        this.diarioTable.setModel(dados);
        this.diarioTable.changeSelection(diarioTable.getRowCount() - 1, 0, false, false);

    }

    private void limpar() {

        this.ufCmb.setSelectedIndex(-1);
        this.segmentoCmb.setSelectedIndex(-1);
        this.ocorrenciaCmb.setSelectedIndex(-1);
        this.horaCmb.setSelectedIndex(-1);
        this.minutoCmb.setSelectedIndex(-1);
        this.supervisorCmb.setSelectedIndex(-1);
        this.supervisorCmb.setEnabled(false);
        this.obsTxt.setText("");

    }

 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCoo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCoo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCoo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCoo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormDiarioCoo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable diarioTable;
    private javax.swing.JComboBox horaCmb;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox minutoCmb;
    private javax.swing.JTextArea obsTxt;
    private javax.swing.JComboBox ocorrenciaCmb;
    private javax.swing.JComboBox segmentoCmb;
    private javax.swing.JComboBox supervisorCmb;
    private javax.swing.JLabel supervisorLabel;
    private javax.swing.JComboBox ufCmb;
    // End of variables declaration//GEN-END:variables
}
