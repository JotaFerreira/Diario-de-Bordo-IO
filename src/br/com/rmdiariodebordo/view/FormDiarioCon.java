package br.com.rmdiariodebordo.view;

import br.com.rmdiariodebordo.model.dao.ControladorDAO;
import br.com.rmdiariodebordo.model.dao.OcorrenciaDAO;
import br.com.rmdiariodebordo.model.dao.PeriodoDAO;
import br.com.rmdiariodebordo.model.dao.TecnicoDAO;
import br.com.rmdiariodebordo.model.vo.Ocorrencia;
import br.com.rmdiariodebordo.model.vo.OcorrenciaControlador;
import br.com.rmdiariodebordo.model.vo.Periodo;
import diario.de.bordo.Versao;
import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import br.com.rmdiariodebordo.model.vo.Ponto;
import br.com.rmdiariodebordo.model.vo.Tecnico;

/**
 *
 * @author joao.oliveira
 */
public class FormDiarioCon extends javax.swing.JFrame {

    /**
     * Creates new form FormDiarioCon
     */
    private ArrayList setores;
    private String usuario;
    private String uf;

    public void setUf(String uf) {
        this.uf = uf;
    }

    public String getUf() {
        return uf;
    }

    public ArrayList getSetores() {
        return setores;
    }

    public String getUsuario() {
        return usuario;
    }

    public void setSetores(ArrayList setores) {
        this.setores = setores;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public FormDiarioCon() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        periodoCmb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        tecnicoCmb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ocorrenciaCmb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        recSupCmb = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        recCooCmb = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        recGerCmb = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        obsTxt = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        diarioTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        graveCheck = new javax.swing.JCheckBox();
        relogioLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Período:");

        jLabel2.setText("Técnico:");

        tecnicoCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tecnicoCmbItemStateChanged(evt);
            }
        });

        jLabel3.setText("Ocorrência:");

        jLabel4.setText("Recorrencia Supervisor:");

        recSupCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não", "Sim" }));

        jLabel5.setText("Recorrencia Coordenador:");

        recCooCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não", "Sim" }));

        jLabel6.setText("Recorrencia Gerencia:");

        recGerCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não", "Sim" }));

        jLabel7.setText("Observações:");

        obsTxt.setColumns(20);
        obsTxt.setRows(5);
        jScrollPane1.setViewportView(obsTxt);

        jButton1.setBackground(new java.awt.Color(51, 102, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setLabel("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        diarioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(diarioTable);

        jLabel8.setText("Grave:");

        relogioLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        relogioLabel.setForeground(new java.awt.Color(204, 0, 51));
        relogioLabel.setText("Relógio");

        jMenu1.setText("Sistema");

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opções");

        jMenuItem2.setText("Atualizar Periodos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Atualizar Técnicos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Atualizar Ocorrencias");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(graveCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recSupCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recCooCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recGerCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(periodoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tecnicoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ocorrenciaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(relogioLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(relogioLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(periodoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tecnicoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ocorrenciaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recSupCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(recCooCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(recGerCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(graveCheck))
                .addGap(11, 11, 11)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Timer relogio = new Timer();

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Object periodo = this.periodoCmb.getSelectedItem();
        Object tecnico = this.tecnicoCmb.getSelectedItem();
        Object ocorrencia = this.ocorrenciaCmb.getSelectedItem();
        Object recSup = this.recSupCmb.getSelectedItem();
        Object recCoo = this.recCooCmb.getSelectedItem();
        Object recGer = this.recGerCmb.getSelectedItem();
        String obs = this.obsTxt.getText().replace("'", "");
        String grave = this.graveCheck.isSelected() ? "s" : "n";

        if (periodo == null) {

            JOptionPane.showMessageDialog(null, "O PERIODO é obrigatório!");
            return;

        } else if (tecnico == null) {

            JOptionPane.showMessageDialog(null, "O TECNICO é obrigatório!");
            return;

        } else if (ocorrencia == null) {

            JOptionPane.showMessageDialog(null, "A OCORRENCIA é obrigatória!");
            return;

        }

        String recSupCooGer = recSup.toString() + recCoo.toString() + recGer.toString();

        if (!recSupCooGer.equals("SimSimSim") & !recSupCooGer.equals("SimSimNão") & !recSupCooGer.equals("SimNãoNão")
                & !recSupCooGer.equals("NãoNãoNão") & !recSupCooGer.equals("NãoSimNão")) {

            JOptionPane.showMessageDialog(null, "Ordem incorreta de RECORRENCIAS!");
            return;

        }

        TecnicoDAO DAOTecnico = new TecnicoDAO();
        ControladorDAO DAOControlador = new ControladorDAO();

        Tecnico Tecnico = new Tecnico();
        String[] infoTecnico = tecnico.toString().split("-");
        String matTecnico = infoTecnico[1].trim();
        Tecnico.setMatricula(matTecnico);
        String setorTecnico = "";
        String nomeAtendente = "";
        String d = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
        int err = 0;
        try {
            setorTecnico = DAOTecnico.getSetor(Tecnico);
            nomeAtendente = DAOControlador.getNome(this.getUsuario());
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro " + err + " : " + ex);
        }

        OcorrenciaControlador Ocorrencia = new OcorrenciaControlador();

        Ocorrencia.setAtendente(nomeAtendente);
        Ocorrencia.setData(d);
        Ocorrencia.setGrave(grave);
        Ocorrencia.setObservacao(obs);
        Ocorrencia.setOcorrencia(ocorrencia.toString());
        Ocorrencia.setPeriodo(periodo.toString());
        Ocorrencia.setRecorrenciaCoordenador(recCoo.toString());
        Ocorrencia.setRecorrenciaGerente(recGer.toString());
        Ocorrencia.setRecorrenciaSupervisor(recSup.toString());
        Ocorrencia.setSetor(setorTecnico);
        Ocorrencia.setTecnico(matTecnico);
        Ocorrencia.setUf(this.getUf());
        Ocorrencia.setUsername(this.getUsuario());

        try {
            DAOControlador.registrarOcorrencia(Ocorrencia);
            atualizaTecnicosPorSetor();
            atualizaDiario();
            limpar();
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro " + err + ": " + ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        String sePontoAtivado = Ponto.isAtivado() ? "Ativado" : "Desativado";
        Versao vInfo = new Versao();
        this.setTitle("Diário de Bordo - Usuário: " + this.getUsuario() + " | Lembrete de Ponto: " + sePontoAtivado
                + " - Build: " + vInfo.getVersion());
        atualizaPeriodos();
        atualizaOcorrencias();
        atualizaTecnicosPorSetor();

        final JFrame me = this;
        relogio.schedule(new TimerTask() {
            public void run() {

                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                Calendar calendar = GregorianCalendar.getInstance();
                Date d = new Date();
                calendar.setTime(d);
                relogioLabel.setText("" + sdf.format(d));
                String hora = String.format("%02d", calendar.get(Calendar.HOUR_OF_DAY));
                String minuto = String.format("%02d", calendar.get(Calendar.MINUTE));
                String segundo = String.format("%02d", calendar.get(Calendar.SECOND));
                String currentTime = hora + ":" + minuto + ":" + segundo;

                if (Ponto.isAtivado()) {

                    for (String h : Ponto.getHorarios()) {

                        if (currentTime.equals(h + ":00")) {

                            try {

                                Desktop.getDesktop().browse(new URL("http://pontoweb/").toURI());
                                me.setExtendedState(JFrame.NORMAL);
                                me.setAlwaysOnTop(true);
                                JOptionPane.showMessageDialog(me, "LEMBRETE DE PONTO! \r\n Lembrete de Ponto para o horário: "
                                        + currentTime, "Lembrete de Ponto", JOptionPane.INFORMATION_MESSAGE);
                                me.setAlwaysOnTop(false);

                            } catch (URISyntaxException | IOException | SecurityException e) {
                                JOptionPane.showMessageDialog(null, "Erro:" + e);

                            }

                        }

                    }
                }
            }
        }, 1000, 1000);

        try {
            atualizaDiario();
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro:" + ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void tecnicoCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tecnicoCmbItemStateChanged

        String strItem = evt.getItem().toString();

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            if (strItem.equals("OUTRO...")) {

                atualizaTecnicosPorUF();

            }

        }

    }//GEN-LAST:event_tecnicoCmbItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        FormLogin frm = new FormLogin();
        frm.setVisible(true);
        Ponto.setAtivado(false);
        relogio.cancel();
        this.dispose();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        atualizaTecnicosPorSetor();

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        atualizaPeriodos();

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        atualizaOcorrencias();

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void atualizaPeriodos() {

        this.periodoCmb.removeAllItems();
        PeriodoDAO DAOPeriodo = new PeriodoDAO();

        try {

            ArrayList<Periodo> periodos = DAOPeriodo.getPeriodos();

            for (Periodo p : periodos) {

                this.periodoCmb.addItem(p.getValorPeriodo());

            }

            this.periodoCmb.setSelectedIndex(-1);

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }

    private void atualizaOcorrencias() {

        this.ocorrenciaCmb.removeAllItems();
        OcorrenciaDAO DAOOcorrencia = new OcorrenciaDAO();

        try {

            ArrayList<Ocorrencia> ocorrencias = DAOOcorrencia.getOcorrenciasControlador();
            
            for (Ocorrencia o : ocorrencias) {
                this.ocorrenciaCmb.addItem(o.getNome());

            }

            this.ocorrenciaCmb.setSelectedIndex(-1);

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }

    private void atualizaTecnicosPorSetor() {

        this.tecnicoCmb.removeAllItems();
        TecnicoDAO DAOTecnico = new TecnicoDAO();

        try {
            ArrayList<Tecnico> tecnicos = DAOTecnico.getTecnicosPorSetor(setores);
            for(Tecnico t : tecnicos){
                this.tecnicoCmb.addItem(t.getNome());
                
            }
           
            this.tecnicoCmb.addItem("OUTRO...");
            this.tecnicoCmb.setSelectedIndex(-1);

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }

    private void atualizaTecnicosPorUF() {

        TecnicoDAO DAOTecnico = new TecnicoDAO();

        try {

            ArrayList<Tecnico> tecnicos = DAOTecnico.getTecnicosPorUF(this.getUf());
            for(Tecnico t : tecnicos){
                this.tecnicoCmb.addItem(t.getNome());
        
            }
            
            this.tecnicoCmb.setSelectedIndex(-1);

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex);
        }

    }

    private void atualizaDiario() throws SQLException, ClassNotFoundException {

        OcorrenciaDAO DAOOcorrencia = new OcorrenciaDAO();
        ArrayList<OcorrenciaControlador> ocorrencias = DAOOcorrencia.getOcorrenciaPorControlador(this.getUsuario());
        Object[] colunaNomes = {"UF", "PERIODO", "TECNICO", "SETOR", "OCORRENCIA", "REC_SUP", "REC_COO",
            "REC_GER", "OBSERVAÇÃO", "GRAVE"};
        DefaultTableModel dados = new DefaultTableModel(new Object[0][0], colunaNomes) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for(OcorrenciaControlador oc : ocorrencias){
            Object[] dadosLinha = {oc.getUf(),oc.getPeriodo(),oc.getTecnico(),oc.getSetor(),oc.getOcorrencia(),
            oc.getRecorrenciaSupervisor(),oc.getRecorrenciaCoordenador(),oc.getRecorrenciaCoordenador(),
            oc.getObservacao(),oc.getGrave()};
            dados.addRow(dadosLinha);
        }
        
        this.diarioTable.setModel(dados);
        this.diarioTable.changeSelection(diarioTable.getRowCount() - 1, 0, false, false);
        //  int qtdlinhas = this.diarioTable.getRowCount()-1;
        // this.diarioTable.setRowSelectionInterval(qtdlinhas, qtdlinhas);

    }

    private void limpar() {

        this.periodoCmb.setSelectedIndex(-1);
        this.tecnicoCmb.setSelectedIndex(-1);
        this.ocorrenciaCmb.setSelectedIndex(-1);
        this.recSupCmb.setSelectedIndex(0);
        this.recCooCmb.setSelectedIndex(0);
        this.recGerCmb.setSelectedIndex(0);
        this.obsTxt.setText("");
        this.graveCheck.setSelected(false);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormDiarioCon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormDiarioCon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable diarioTable;
    private javax.swing.JCheckBox graveCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea obsTxt;
    private javax.swing.JComboBox ocorrenciaCmb;
    private javax.swing.JComboBox periodoCmb;
    private javax.swing.JComboBox recCooCmb;
    private javax.swing.JComboBox recGerCmb;
    private javax.swing.JComboBox recSupCmb;
    private javax.swing.JLabel relogioLabel;
    private javax.swing.JComboBox tecnicoCmb;
    // End of variables declaration//GEN-END:variables
}
